hk import java.util.*;

public class BattleShipAI2 {
    public static Scanner s = new Scanner(System.in);
    private static char[][] board;
    private static int AREA;
    private static int shipCounter;
    private static int[] shipColArray;
    private static int[] shipRowArray;
    private static int[] shipSizeArray;
    private static int fireCount;
    private static int hitCounter;
    private static int guess;

    public static void main(String[] args) {
        System.out.println("Computer SETUP...DONE...PRESS ENTER TO CONTINUE...");
        System.out.println("Welcome to Battleship Game!");
        System.out.println("Sink the hidden ship on the board.");
        System.out.println("Enter coordinates in the format <Letter><Number> (e.g., A1, G3).");
        System.out.println("Let's start!\n");

        initializeGame();

        // Main game loop
        while (true) {
            displayBoard();
            String userInput = getUserInput();
            if (isValidInput(userInput)) {
                int row = convertRow(userInput.charAt(0));
                int col = Integer.parseInt(userInput.substring(1)) - 1;
                processUserGuess(row, col);
                if (isGameOver()) {
                    displayBoard();
                    System.out.println("Congratulations! You destroyed all the ships in " + fireCount + " tries.");
                    break;
                }
            } else {
                System.out.println("Invalid input. Please enter a valid coordinate.");
            }
        }
    }

    // Initialize the game (setup the board, ships, etc.)
    private static void initializeGame() {
        AREA = DataValaNum(s);
        board = new char[AREA][AREA];
        for (int i = 0; i < AREA; i++) {
            Arrays.fill(board[i], ' ');
        }

        shipCounter = 4; // You can change this to the number of ships you want.

        shipColArray = new int[shipCounter];
        shipRowArray = new int[shipCounter];
        shipSizeArray = new int[shipCounter];

        for (int i = 0; i < shipCounter; i++) {
            boolean bool = false;
            while (!bool) {
                shipSizeArray[i] = (int) (Math.random() * 3) + 2; // Random size between 2 and 4
                if (shipSizeArray[i] >= 2 && shipSizeArray[i] <= 4) {
                    bool = true;
                }
            }

            guess = (int) (Math.random() * 2);

            if (guess == 0) {
                shipRowArray[i] = (int) (Math.random() * AREA);
                shipColArray[i] = (int) (Math.random() * (AREA - shipSizeArray[i] + 1)); // goes right
            } else {
                shipRowArray[i] = (int) (Math.random() * (AREA - shipSizeArray[i] + 1)); // goes down
                shipColArray[i] = (int) (Math.random() * AREA);
            }

            fireCount = 0;
        }
    }

    // Display the current state of the game board
    private static void displayBoard() {
        System.out.println();
        System.out.print("  ");
        for (int i = 0; i < AREA; i++) {
            System.out.print((i + 1) + " "); // Print column numbers
        }
        System.out.println();

        for (int i = 0; i < AREA; i++) {
            System.out.print((char) ('A' + i) + " "); // Print row letter
            for (int j = 0; j < AREA; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }

    public static int DataValaNum(Scanner scanner) {
        int n = 0;
        boolean validInput = false;

        while (!validInput) {
            System.out.print("Enter the Battlefield size (4-20): ");
            if (scanner.hasNextInt()) {
                n = scanner.nextInt();
                if (n >= 4 && n <= 20) {
                    validInput = true;
                } else {
                    System.out.println("Please enter a valid size between 4 and 20.");
                }
            } else {
                System.out.println("Invalid input. Please enter a positive integer.");
                scanner.nextLine(); // Consume invalid input
            }
        }
        return n;
    }

    // Get user input for their next guess
    private static String getUserInput() {
        System.out.print("Enter your guess: ");
        return s.next().toUpperCase();
    }

    private static boolean isValidInput(String input) {
        if (input.length() < 2 || input.length() > 3) {
            return false;
        }

        char rowChar = input.charAt(0);
        int col;

        if (rowChar < 'A' || rowChar >= 'A' + AREA) {
            return false;
        }

        try {
            col = Integer.parseInt(input.substring(1));
            if (col < 1 || col > AREA) {
                return false;
            }
        } catch (NumberFormatException e) {
            return false;
        }

        return true;
    }

    // Process the user's guess and update the board
    private static void processUserGuess(int row, int col) {
        if (board[row][col] == 'O' || board[row][col] == 'X') {
            System.out.println("You already hit here!");
        } else {
            fireCount++;
            boolean hit = false;

            for (int i = 0; i < shipCounter; i++) {
                for (int j = 0; j < shipSizeArray[i]; j++) {
                    if ((col == shipColArray[i] && row == shipRowArray[i] + j) ||
                            (row == shipRowArray[i] && col == shipColArray[i] + j)) {
                        hit = true;
                        System.out.println("Hit!");
                        hitCounter++;
                        board[row][col] = 'X'; // Mark the ship as sunk

                        if (hitCounter == shipSizeArray[i]) {
                            System.out.println("You destroyed a ship!");
                        }
                    }
                }
            }

            if (!hit) {
                System.out.println("Missed!");
                board[row][col] = 'O'; // Mark the missed shot
            }
        }
    }

    // Check if the game is over (all ships destroyed)
    private static boolean isGameOver() {
        // Check if all ships are destroyed
        for (int i = 0; i < shipCounter; i++) {
            if (hitCounter < shipSizeArray[i]) {
                return false; // At least one ship is not destroyed
            }
        }
        return true; // All ships are destroyed
    }

    // Convert row coordinate (A-J) to an array index (0-9)
    private static int convertRow(char rowChar) {
        return rowChar - 'A';
    }
}
